/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var N=(c,s)=>{for(var e in s)m(c,e,{get:s[e],enumerable:!0})},x=(c,s,e,n)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of b(s))!F.call(c,o)&&o!==e&&m(c,o,{get:()=>s[o],enumerable:!(n=v(s,o))||n.enumerable});return c};var C=c=>x(m({},"__esModule",{value:!0}),c);var E={};N(E,{default:()=>g});module.exports=C(E);var t=require("obsidian"),S={daysThreshold:5,todoNoteFilename:"Todo.md"},g=class extends t.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new w(this.app,this)),this.registerMarkdownCodeBlockProcessor("todo-input",(e,n,o)=>{let a=n.createDiv("todo-input-bar").createDiv("todo-input-group"),d=a.createDiv("todo-input-section"),i=d.createEl("input",{type:"text",placeholder:"Add a new todo item...",cls:"todo-input"}),r=d.createEl("button",{text:"Add",cls:"todo-add-btn"}),p=a.createDiv("todo-clean-section").createEl("button",{text:"\u{1F9F9} Clean",cls:"todo-clean-btn"}),f=async()=>{let h=i.value.trim();if(h)try{await this.addTodoItem(h),i.value="",i.focus()}catch(T){new t.Notice("Error adding todo: "+T.message)}else new t.Notice("Please enter some text for the todo item")},y=async()=>{try{await this.cleanTodoFile()}catch(h){new t.Notice("Error cleaning todos: "+h.message)}};r.addEventListener("click",f),p.addEventListener("click",y),i.addEventListener("keydown",h=>{h.key==="Enter"&&(h.preventDefault(),f())})})}async cleanFile(e){if(!e){new t.Notice("No note to clean.");return}let n=(0,t.moment)().startOf("day").subtract(this.settings.daysThreshold,"days"),o=/- \[[xX]\]\s.*?(?:âœ…\s*)?(\d{4}-\d{2}-\d{2}).*?(?:\n|$)/g;await this.app.vault.process(e,l=>{let a=l.replace(o,(d,i)=>{let r=(0,t.moment)(i,"YYYY-MM-DD",!0);return r.isValid()&&r.isSameOrBefore(n)?"":d});return a!==l?(new t.Notice(`Removed tasks completed ${this.settings.daysThreshold} day(s) ago or earlier.`),a):(new t.Notice("Nothing to clean: no matching lines."),l)})}async loadSettings(){this.settings=Object.assign({},S,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async addTodoItem(e){let n=this.app.vault.getAbstractFileByPath(this.settings.todoNoteFilename);if(!(n instanceof t.TFile)){new t.Notice(`Todo note "${this.settings.todoNoteFilename}" not found. Please check the filename in settings.`);return}await this.app.vault.process(n,o=>{let l=`- [ ] ${e}
`,a=(0,t.getFrontMatterInfo)(o),d=0;return a.exists&&(d=a.contentStart),o.slice(0,d)+l+o.slice(d)})}async cleanTodoFile(){let e=this.app.vault.getAbstractFileByPath(this.settings.todoNoteFilename);if(!(e instanceof t.TFile)){new t.Notice(`Todo note "${this.settings.todoNoteFilename}" not found. Please check the filename in settings.`);return}await this.cleanFile(e)}},w=class extends t.PluginSettingTab{constructor(e,n){super(e,n);this.plugin=n}display(){let{containerEl:e}=this;e.empty(),new t.Setting(e).setName("Keep the last N days").setDesc("Only keep items completed within the last N days; older lines will be deleted.").addText(r=>r.setPlaceholder("5").setValue(String(this.plugin.settings.daysThreshold)).onChange(async u=>{let p=parseInt(u.trim(),10);!Number.isNaN(p)&&p>=0&&(this.plugin.settings.daysThreshold=p,await this.plugin.saveSettings())}));let n=document.createElement("div");n.addClass("clean-done-todos-info");let o=document.createElement("strong");o.textContent="Todo input bar:";let l=document.createElement("br"),a=document.createTextNode("Add this code block anywhere in a note to get an input bar with add and clean functions:"),d=document.createElement("br"),i=document.createElement("code");i.addClass("clean-done-todos-code"),i.textContent="```todo-input\n\n```",n.appendChild(o),n.appendChild(l),n.appendChild(a),n.appendChild(d),n.appendChild(i),new t.Setting(e).setName("Todo note filename").setDesc("The filename of the note where new todo items will be added.").addText(r=>r.setPlaceholder("Todo.md").setValue(this.plugin.settings.todoNoteFilename).onChange(async u=>{this.plugin.settings.todoNoteFilename=u.trim()||"Todo.md",await this.plugin.saveSettings()})),e.appendChild(n)}};
