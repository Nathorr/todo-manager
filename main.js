/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var k=(h,i)=>{for(var e in i)m(h,e,{get:i[e],enumerable:!0})},F=(h,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of b(i))!C.call(h,n)&&n!==e&&m(h,n,{get:()=>i[n],enumerable:!(t=y(i,n))||t.enumerable});return h};var E=h=>F(m({},"__esModule",{value:!0}),h);var x={};k(x,{default:()=>g});module.exports=E(x);var o=require("obsidian"),N={daysThreshold:0,todoNoteFilename:"\u{1F31F} To-do.md",insertPosition:"prepend",autoMoveChecked:!1};function S(h,i){let e=null;return(...t)=>{e&&window.clearTimeout(e),e=window.setTimeout(()=>h(...t),i)}}var g=class extends o.Plugin{async onload(){if(await this.loadSettings(),this.addSettingTab(new f(this.app,this)),this.registerMarkdownCodeBlockProcessor("todo-input",(e,t,n)=>{let d=t.createDiv("todo-input-bar").createDiv("todo-input-group"),r=d.createDiv("todo-input-section"),s=r.createEl("input",{type:"text",placeholder:"Add a new todo item...",cls:"todo-input"}),c=r.createEl("button",{text:"Add",cls:"todo-add-btn"}),u=d.createDiv("todo-clean-section").createEl("button",{text:"\u{1F9F9} Clean",cls:"todo-clean-btn"}),w=async()=>{let p=s.value.trim();if(p)try{await this.addTodoItem(p),s.value="",s.focus()}catch(v){console.error(v),new o.Notice("Error adding todo: "+v.message)}else new o.Notice("Please enter some text for the todo item")},T=async()=>{try{await this.cleanTodoFile()}catch(p){console.error(p),new o.Notice("Error cleaning todos: "+p.message)}};c.addEventListener("click",w),u.addEventListener("click",T),s.addEventListener("keydown",p=>{p.key==="Enter"&&(p.preventDefault(),w())})}),this.settings.autoMoveChecked){let e=S(async()=>{let t=this.getTodoFile();t&&await this.autoMoveChecked(t)},500);this.registerEvent(this.app.workspace.on("editor-change",e)),this.registerEvent(this.app.vault.on("modify",async t=>{t instanceof o.TFile&&t.path===this.settings.todoNoteFilename&&await this.autoMoveChecked(t)}))}}getTodoFile(){let e=this.app.vault.getAbstractFileByPath(this.settings.todoNoteFilename);return e instanceof o.TFile?e:(new o.Notice(`Todo note "${this.settings.todoNoteFilename}" not found. Please check the filename in settings.`),null)}async cleanFile(e){if(!e)return;let t=(0,o.moment)().startOf("day").subtract(this.settings.daysThreshold,"days"),n=/^- \[[xX]\].*?(?:âœ…\s*(\d{4}-\d{2}-\d{2}))?.*(?:\r?\n|$)/gm,a=0;await this.app.vault.process(e,d=>d.replace(n,(s,c)=>{if(c){let l=(0,o.moment)(c,"YYYY-MM-DD",!0);if(l.isValid()&&l.isSameOrBefore(t))return a++,""}else if(this.settings.daysThreshold===0)return a++,"";return s})),a>0?new o.Notice(`Removed ${a} completed task(s).`):new o.Notice("Nothing to clean: no matching lines.")}async autoMoveChecked(e){e&&await this.app.vault.process(e,t=>{let n=t.split(/\r?\n/),a=[],d=[],r=[];for(let s of n)/^- \[ \]/.test(s)?a.push(s):/^- \[[xX]\]/.test(s)?d.push(s):r.push(s);return[...r,...a,...d].join(`
`)})}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async addTodoItem(e){let t=this.getTodoFile();t&&await this.app.vault.process(t,n=>{let a=`- [ ] ${e}
`;if(this.settings.insertPosition==="append")return n+`
`+a;let d=(0,o.getFrontMatterInfo)(n),r=0;return d.exists&&(r=d.contentStart),n.slice(0,r)+a+n.slice(r)})}async cleanTodoFile(){let e=this.getTodoFile();e&&await this.cleanFile(e)}},f=class extends o.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new o.Setting(e).setName("Keep the last N days").setDesc("Only keep items completed within the last N days; older lines will be deleted.").addText(c=>c.setPlaceholder("5").setValue(String(this.plugin.settings.daysThreshold)).onChange(async l=>{let u=parseInt(l.trim(),10);!Number.isNaN(u)&&u>=0&&(this.plugin.settings.daysThreshold=u,await this.plugin.saveSettings())})),new o.Setting(e).setName("New todo position").setDesc("Choose whether new todos are added at the top (after frontmatter) or at the bottom of the file.").addDropdown(c=>c.addOption("prepend","Top of file (default)").addOption("append","Bottom of file").setValue(this.plugin.settings.insertPosition).onChange(async l=>{this.plugin.settings.insertPosition=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("Todo note filename").setDesc("The filename of the note where new todo items will be added.").addText(c=>c.setPlaceholder("Todo.md").setValue(this.plugin.settings.todoNoteFilename).onChange(async l=>{this.plugin.settings.todoNoteFilename=l.trim()||"Todo.md",await this.plugin.saveSettings()})),new o.Setting(e).setName("Auto-move checked todos").setDesc("Automatically move checked todos to the bottom of the list (above other checked items).").addToggle(c=>c.setValue(this.plugin.settings.autoMoveChecked).onChange(async l=>{this.plugin.settings.autoMoveChecked=l,await this.plugin.saveSettings(),new o.Notice(`Auto-move checked todos ${l?"enabled":"disabled"}. Restart or reload the plugin to apply.`)}));let t=document.createElement("div");t.addClass("todo-sweep-info");let n=document.createElement("strong");n.textContent="Todo input bar:";let a=document.createElement("br"),d=document.createTextNode("Add this code block at the top of a note to get an input bar with add and clean functions:"),r=document.createElement("br"),s=document.createElement("code");s.addClass("todo-sweep-code"),s.textContent="```todo-input\n\n```",t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(r),t.appendChild(s),e.appendChild(t)}};
