/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var k=(h,l)=>{for(var e in l)m(h,e,{get:l[e],enumerable:!0})},F=(h,l,e,n)=>{if(l&&typeof l=="object"||typeof l=="function")for(let o of b(l))!C.call(h,o)&&o!==e&&m(h,o,{get:()=>l[o],enumerable:!(n=y(l,o))||n.enumerable});return h};var E=h=>F(m({},"__esModule",{value:!0}),h);var x={};k(x,{default:()=>g});module.exports=E(x);var t=require("obsidian"),N={daysThreshold:0,todoNoteFilename:"\u{1F31F} To-do.md",insertPosition:"prepend",autoMoveChecked:!1},g=class extends t.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new f(this.app,this)),this.registerMarkdownCodeBlockProcessor("todo-input",(e,n,o)=>{let a=n.createDiv("todo-input-bar").createDiv("todo-input-group"),d=a.createDiv("todo-input-section"),s=d.createEl("input",{type:"text",placeholder:"Add a new todo item...",cls:"todo-input"}),r=d.createEl("button",{text:"Add",cls:"todo-add-btn"}),u=a.createDiv("todo-clean-section").createEl("button",{text:"\u{1F9F9} Clean",cls:"todo-clean-btn"}),v=async()=>{let p=s.value.trim();if(p)try{await this.addTodoItem(p),s.value="",s.focus()}catch(w){console.error(w),new t.Notice("Error adding todo: "+w.message)}else new t.Notice("Please enter some text for the todo item")},T=async()=>{try{await this.cleanTodoFile()}catch(p){console.error(p),new t.Notice("Error cleaning todos: "+p.message)}};r.addEventListener("click",v),u.addEventListener("click",T),s.addEventListener("keydown",p=>{p.key==="Enter"&&(p.preventDefault(),v())})}),this.settings.autoMoveChecked&&(this.registerEvent(this.app.workspace.on("editor-change",async()=>{let e=this.getTodoFile();e&&await this.autoMoveChecked(e)})),this.registerEvent(this.app.vault.on("modify",async e=>{e.path===this.settings.todoNoteFilename&&await this.autoMoveChecked(e)})))}getTodoFile(){let e=this.app.vault.getAbstractFileByPath(this.settings.todoNoteFilename);return e instanceof t.TFile?e:(new t.Notice(`Todo note "${this.settings.todoNoteFilename}" not found. Please check the filename in settings.`),null)}async cleanFile(e){if(!e)return;let n=(0,t.moment)().startOf("day").subtract(this.settings.daysThreshold,"days"),o=/^- \[[xX]\].*?(?:âœ…\s*(\d{4}-\d{2}-\d{2}))?.*(?:\r?\n|$)/gm,i=0;await this.app.vault.process(e,a=>a.replace(o,(s,r)=>{if(r){let c=(0,t.moment)(r,"YYYY-MM-DD",!0);if(c.isValid()&&c.isSameOrBefore(n))return i++,""}else if(this.settings.daysThreshold===0)return i++,"";return s})),i>0?new t.Notice(`Removed ${i} completed task(s).`):new t.Notice("Nothing to clean: no matching lines.")}async autoMoveChecked(e){e instanceof t.TFile&&await this.app.vault.process(e,n=>{let o=n.split(/\r?\n/),i=[],a=[],d=[];for(let s of o)/^- \[ \]/.test(s)?i.push(s):/^- \[[xX]\]/.test(s)?a.push(s):d.push(s);return[...d,...i,...a].join(`
`)})}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async addTodoItem(e){let n=this.getTodoFile();n&&await this.app.vault.process(n,o=>{let i=`- [ ] ${e}
`;if(this.settings.insertPosition==="append")return o+`
`+i;let a=(0,t.getFrontMatterInfo)(o),d=0;return a.exists&&(d=a.contentStart),o.slice(0,d)+i+o.slice(d)})}async cleanTodoFile(){let e=this.getTodoFile();e&&await this.cleanFile(e)}},f=class extends t.PluginSettingTab{constructor(e,n){super(e,n);this.plugin=n}display(){let{containerEl:e}=this;e.empty(),new t.Setting(e).setName("Keep the last N days").setDesc("Only keep items completed within the last N days; older lines will be deleted.").addText(r=>r.setPlaceholder("5").setValue(String(this.plugin.settings.daysThreshold)).onChange(async c=>{let u=parseInt(c.trim(),10);!Number.isNaN(u)&&u>=0&&(this.plugin.settings.daysThreshold=u,await this.plugin.saveSettings())})),new t.Setting(e).setName("New todo position").setDesc("Choose whether new todos are added at the top (after frontmatter) or at the bottom of the file.").addDropdown(r=>r.addOption("prepend","Top of file (default)").addOption("append","Bottom of file").setValue(this.plugin.settings.insertPosition).onChange(async c=>{this.plugin.settings.insertPosition=c,await this.plugin.saveSettings()})),new t.Setting(e).setName("Todo note filename").setDesc("The filename of the note where new todo items will be added.").addText(r=>r.setPlaceholder("Todo.md").setValue(this.plugin.settings.todoNoteFilename).onChange(async c=>{this.plugin.settings.todoNoteFilename=c.trim()||"Todo.md",await this.plugin.saveSettings()})),new t.Setting(e).setName("Auto-move checked todos").setDesc("Automatically move checked todos to the bottom of the list (above other checked items).").addToggle(r=>r.setValue(this.plugin.settings.autoMoveChecked).onChange(async c=>{this.plugin.settings.autoMoveChecked=c,await this.plugin.saveSettings(),new t.Notice(`Auto-move checked todos ${c?"enabled":"disabled"}. Restart or reload the plugin to apply.`)}));let n=document.createElement("div");n.addClass("clean-done-todos-info");let o=document.createElement("strong");o.textContent="Todo input bar:";let i=document.createElement("br"),a=document.createTextNode("Add this code block at the top of a note to get an input bar with add and clean functions:"),d=document.createElement("br"),s=document.createElement("code");s.addClass("clean-done-todos-code"),s.textContent="```todo-input\n\n```",n.appendChild(o),n.appendChild(i),n.appendChild(a),n.appendChild(d),n.appendChild(s),e.appendChild(n)}};
